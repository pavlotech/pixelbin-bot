import { Telegraf, Context } from "telegraf";
import { Command } from "./command.class";
import { IBotContext } from "../context/context.interface";
import { tinkoffPAY } from "../types/tinkoff.class";
import { IConfigService } from "../config/config.interface";

export class Vip extends Command {
  private priceVIP = 490;
  private tokenAdd = 30;
  private tinkoff: tinkoffPAY;

  private editMessageIds: Map<number, number | null> = new Map<number, number | null>();
  private paymentIds: Map<number, string | null> = new Map<number, string | null>();
  private paymentStatuses: Map<number, boolean | null> = new Map<number, boolean | null>();

  constructor(bot: Telegraf<IBotContext>, private readonly config: IConfigService) {
    super(bot);
    this.tinkoff = new tinkoffPAY(this.config.get('SHOP_ID'), this.config.get('SECRET_KEY'));
  }

  handle(logger: any, database: any): void {
    this.bot.command('vip', async (ctx) => {
      try {
        ctx.reply(`
–ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç 30 –æ–±—Ä–∞–±–æ—Ç–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—É–º–º–µ. 

–°—Ç–æ–∏–º–æ—Å—Ç—å: 490 —Ä—É–±

–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ
        `, {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–ö—É–ø–∏—Ç—å", callback_data: 'buy' }]
            ]
          },
          parse_mode: 'Markdown'
        });
      } catch (error) {
        logger.error(error);
      }
    });

    this.bot.action('buy', async (ctx) => {
      try {
        const user = await database.findUnique('user', { userId: ctx.from?.id });
        if (user.ban) return;

        let numPay = user.lastPay / 1 + 1;
        if (isNaN(numPay)) {
          numPay = +new Date();
        }
        const Amount = this.priceVIP * 100;

        this.tinkoff.createInvoice({
          Amount: Amount,
          OrderId: `px_01_${numPay}_${ctx.from?.id}`,
          Description: "VIP-–ø–æ–¥–ø–∏—Å–∫–∞ MidJourney-–±–æ—Ç.",
        }, {
          Email: "pixelbintelegram@mail.ru",
          Taxation: "usn_income",
          Items: [
            {
              Name: `mjoj${this.priceVIP}`,
              Quantity: 1,
              Price: Amount,
              Amount: Amount,
              Tax: "vat20",
            },
          ]
        }).then(async (invoice: any) => {
          const messageText = `
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ'.
‚ùóÔ∏è–í–ê–ñ–ù–û: –û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ –ø–∏—à–µ—Ç, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 10-30 —Å–µ–∫—É–Ω–¥ ‚è≥
–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: ${invoice.PaymentURL}
          `;

          const editMessage = await ctx.reply(messageText, {
            parse_mode: "Markdown",
            reply_markup: {
              inline_keyboard: [
                [{ text: "–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üí∞", url: invoice.PaymentURL }],
                [{ text: "–Ø –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ", callback_data: 'i_paid' }]
              ]
            },
          });

          this.editMessageIds.set(user.userId, editMessage.message_id);
          this.paymentIds.set(user.userId, invoice.PaymentId);
          this.paymentStatuses.set(user.userId, true);
        }).catch((error) => logger.error(error));
      } catch (error) {
        logger.error(error);
      }
    });

    this.bot.action('i_paid', async (ctx) => {
      try {
        const userId = ctx.from?.id;
        if (userId) {
          const editMessageId = this.editMessageIds.get(userId);
          const paymentId = this.paymentIds.get(userId);
          const paymentStatus = this.paymentStatuses.get(userId);

          if (editMessageId && paymentId && paymentStatus) {
            this.paymentStatuses.set(userId, false);

            await ctx.telegram.editMessageText(ctx.chat?.id, editMessageId, '', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã...', { parse_mode: 'Markdown' });

            const invoice: any = await this.tinkoff.statusInvoice(paymentId);

            if (invoice.Status === 'CONFIRMED') {
              const user = await database.findUnique('user', { userId: userId });
              await database.update('user', { userId: userId }, { subscribe: user.subscribe + 30, lastPay: Date.now() });
              await ctx.reply('*–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!*', { parse_mode: 'Markdown' });
              logger.info(`${userId} - https://t.me/${ctx.from?.username} bought a subscription`);
            } else {
              await ctx.reply('<b>–ü–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–æ—à—ë–ª</b>', { parse_mode: 'HTML' });
              logger.info(`${userId} - https://t.me/${ctx.from?.username} payment failed`);
            }
          }
          this.editMessageIds.delete(userId);
          this.paymentIds.delete(userId);
          this.paymentStatuses.delete(userId);
        }
      } catch (error) {
        logger.error(error);
      }
    });
  }
}
